// 이름을 묻고 인사하는 프로그램
#include <iostream>
#include <string>

int main()
{
    std::cout << "Please enter your first name: ";

    // 입력한 내용을 전달받으려면 이를 저장할 장소가 있어야 한다. -> 변수(variable)
    // 변수는 이름이 있는 객체(object)이고 객체는 타입이 정해진 컴퓨터 메모리의 일부이다. ⚠️ 객체와 변수의 구분하기 ⚠️
    // std::string 타입 변수 name의 정의문(definition) -> 변수 타입: (std::)string, 변수 이름: name
    std::string name;
    // 문자열 변수를 정의하면 표준 라이브러리에서는 모든 문자열 객체가 값을 갖는다고 정해놓았기 떄문에 암묵적으로 변수가 초기화 된다.
    // 원하는 값을 넣어 초기화할 수 있지만, 이 동작이 없다면 문자를 전혀 갖지 않는다.
    // 이러한 문자열을 '빈(empty) 문자열' 또는 'null 문자열'이라고 한다.

    // 문자열을 읽도록 라이브러리에 요청하면 공백(whitespace)문자(스페이스, 탭, 백스페이스, 행바꿈)를 무시하고
    // 다음 공백 문자나 EOF(End Of File)이 나타날 때까지 문자들을 읽어 변수 name에 넣는다.
    std::cin >> name;
    // cout를 사용하여 메시지를 출력할 때, 출력 내용은 표준 출력 스트림과 관련된 버퍼에 저장된다.
    // 그 다음으로 cin을 사용하여 입력 받는 데, 이 작업은 cout 버퍼를 비우므로 메시지가 화면에 출력되는 것을 볼 수 있다.

    std::cout << "Hello, " << name << "!" << std::endl;
    // 값이 출력되면 이 행에서 해야 할 작업이 끝나므로 버퍼를 비운다.
    // 이 때 시스템은 버퍼의 내용을 출력 스트림에 강제로 즉시 반영.

    return 0;
}

// ⚠️❗️ 일반적으로 입출력 라이브러리는 출력 작업을 최적화하려고 버퍼(buffer)라는 내부 데이터 구조를 사용한다.
// 각 출력 요청에 효율적으로 응답하려고 라이브러리는 버퍼를 사용하여 출력할 문자를 모은다.
// 그리고 필요할 때만 버퍼에 저장한 내용을 출력하고 버퍼를 비운다. 이러한 방법으로 여러 번의 출력 작업을 효율적으로 처리한다.
// 시스템이 버퍼를 비우는 상황
// 1. 버퍼가 가득 차 있으면 라이브러리는 자동으로 버퍼를 비운다.
// 2. 라이브러리가 표준 입력 스트림으로 입력 내용을 요청받으면 라이브러리는 즉시 버퍼를 비운다.
// 3. 개발자가 명시한 코드로 버퍼를 비울 수 있다.
// 출력 버퍼를 적절한 순간에 비우는 것은 실행 시간이 긴 프로그램을 만들 때 중요한 사항이다.